services:
  postgres:
    image: postgres:16-alpine
    container_name: pkm-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: pkm_db
      POSTGRES_USER: ${DB_USER:-pkm}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - traefik-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-pkm} -d pkm_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  pkm-bridge:
    build: .
    container_name: pkm-bridge-server
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

    # No ports exposed - Traefik handles all external access
    # Uncomment if you need direct access for debugging:
    # ports:
    #   - "127.0.0.1:8000:8000"

    # Load environment variables from .env file (no variable interpolation)
    env_file:
      - .env

    # Override specific values that need defaults or container paths
    environment:
      # Directories (container paths - different from host paths)
      - ORG_DIR=/data/org-agenda
      - LOGSEQ_DIR=/data/logseq

      # Server Configuration
      - PORT=8000
      - HOST=0.0.0.0  # Listen on all interfaces inside container
      - DEBUG=false

      # Database - use placeholders so Python can URL-encode the password
      - DATABASE_URL=postgresql://{DB_USER}:{DB_PASSWORD}@postgres:5432/pkm_db

    volumes:
      # Mount org files
      - ${ORG_DIR}:/data/org-agenda:rw

      # Mount Logseq files
      - ${LOGSEQ_DIR}:/data/logseq:rw

      # Optional: Persist session data (if we add Redis/DB later)
      # - ./data/sessions:/app/data/sessions

    networks:
      - traefik-net

    # Traefik labels for reverse proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pkm-bridge.rule=Host(`pkm.oberbrunner.com`)||Host(`pkm.home.oberbrunner.com`)||Host(`pkm`)"
      - "traefik.http.services.pkm-bridge.loadbalancer.server.port=8000"

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres-data:
    # Persistent storage for PostgreSQL database

networks:
  traefik-net:
    external: true    # This tells Docker this network already exists
    name: traefik-net # Must match the name in traefik's compose file
